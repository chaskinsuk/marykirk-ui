'use strict';

/* Services */

var marykirkServices = angular.module('marykirkApp.services', [ 'ngRoute',
		'elasticsearch' ]);

marykirkServices.factory('customersFactory', [ '$q', 'esFactory', '$location',
		function($q, esFactory, $location) {
			var client = esFactory({
				// host: $location.host() + ':9200'
				host : '10.0.0.161:9200'
			});

			/**
			 * Search All customers Given a term and an offset, load another
			 * round of 10 customers.
			 * 
			 * Returns a promise.
			 */
			var search = function(term, offset) {
				var deferred = $q.defer();
				var query = {
						match_all : {}
				};

				client.search({
					index : 'marykirk',
					type : 'customer',
					body : {
						size : 10,
						from : (offset || 0) * 10,
						query : query
					}
				}).then(function(result) {
					var ii = 0, hits_in, hits_out = [];

					hits_in = (result.hits || {}).hits || [];

					for (; ii < hits_in.length; ii++) {
						hits_out.push(hits_in[ii]._source.customer);
					}

					deferred.resolve(hits_out);
				}, deferred.reject);

				return deferred.promise;
			};

			var getESCustomerId = function(id) {
				var deferred = $q.defer();
				var query = {
					match : {
						id : id
					}
				};
				
				client.search({
					index : 'marykirk',
					type : 'customer',
					body : {
						query : query
					}
				}).then(function(result) {
					var ii = 0, hits_in, hits_out = [];

					hits_in = (result.hits || {}).hits || [];

					for (; ii < hits_in.length; ii++) {
						hits_out.push(hits_in[ii]._id);
					}

					deferred.resolve(hits_out[0]);
				}, function(error) {
					
					deferred.reject;
				});
				return deferred.promise;
			}
			
			var removeUser = function(id) {
				var deferred = $q.defer();

				client.delete({
					index : 'marykirk',
					type : 'customer',
					id : id
				}).then(function(result) {
					var msg = result.message;

					deferred.resolve(msg);
				}, function(error) {
					
					deferred.reject;
				});

				return deferred.promise;
			};
			// Since this is a factory method, we return an object representing
			// the actual service.
			return {
				search : search,
				removeUser : removeUser,
				getESCustomerId : getESCustomerId
			};
		} ]);